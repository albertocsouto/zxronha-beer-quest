// msc.h
// Generado por Mojon Script Compiler de la Churrera
// Copyleft 2011 The Mojon Twins
 
// Script data & pointers
extern unsigned char mscce_0 [];
extern unsigned char mscce_1 [];
extern unsigned char msccf_0 [];
 
unsigned char *e_scripts [] = {
    0, 0, 0, 0, mscce_1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, mscce_0, 0
};
 
unsigned char *f_scripts [] = {
    0, 0, 0, 0, msccf_0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
 
#asm
._mscce_0

    defb 0x07, 0x41, 0x0A, 0xFF, 0x01, 0x03, 0x01, 0xFF, 0x21, 0x50, 0x00, 0xFF, 0xE3, 0x00, 0x00, 0x00
    defb 0x00, 0x00, 0x00, 0x34, 0x28, 0x25, 0x00, 0x27, 0x21, 0x33, 0x00, 0x2B, 0x25, 0x25, 0x30, 0x25
    defb 0x32, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0xFF, 0x21, 0x50, 0x01, 0xFF, 0xE3, 0x00
    defb 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x21, 0x34, 0x33, 0x00, 0x21, 0x2E, 0x24, 0x00, 0x22, 0x25
    defb 0x25, 0x32, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0xFF, 0x21, 0x50, 0x02, 0xFF
    defb 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x25, 0x21, 0x30, 0x00, 0x2F, 0x26, 0x00, 0x26
    defb 0x21, 0x29, 0x34, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0xFF, 0x21, 0x50
    defb 0x03, 0xFF, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x28, 0x25, 0x00
    defb 0x32, 0x2F, 0x2F, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0xFF
    defb 0x21, 0x50, 0x04, 0xFF, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x28, 0x25, 0x00
    defb 0x25, 0x2E, 0x34, 0x32, 0x21, 0x2E, 0x23, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    defb 0xEE, 0xFF, 0x21, 0x50, 0x05, 0xFF, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    defb 0x00, 0x34, 0x28, 0x25, 0x00, 0x30, 0x29, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    defb 0x00, 0x00, 0xEE, 0xFF, 0x21, 0x50, 0x06, 0xFF, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    defb 0x34, 0x28, 0x25, 0x00, 0x22, 0x21, 0x34, 0x00, 0x32, 0x2F, 0x2F, 0x2D, 0x00, 0x00, 0x00, 0x00
    defb 0x00, 0x00, 0x00, 0x00, 0xEE, 0xFF, 0x21, 0x50, 0x07, 0xFF, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x34
    defb 0x28, 0x25, 0x00, 0x29, 0x24, 0x29, 0x2F, 0x34, 0x00, 0x23, 0x28, 0x21, 0x2D, 0x22, 0x25, 0x32
    defb 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0xFF, 0x22, 0x50, 0x08, 0xFF, 0xE3, 0x00, 0x00, 0x00
    defb 0x00, 0x00, 0x00, 0x23, 0x21, 0x36, 0x25, 0x33, 0x00, 0x25, 0x2E, 0x34, 0x32, 0x21, 0x2E, 0x23
    defb 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0xFF, 0x22, 0x50, 0x09, 0xFF, 0xE3
    defb 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x21, 0x36, 0x25, 0x33, 0x00, 0x25, 0x2E, 0x34, 0x32
    defb 0x21, 0x2E, 0x23, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0xFF, 0x22, 0x50
    defb 0x0A, 0xFF, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x21, 0x36, 0x25, 0x33, 0x00, 0x25
    defb 0x2E, 0x34, 0x32, 0x21, 0x2E, 0x23, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE
    defb 0xFF, 0x22, 0x50, 0x0B, 0xFF, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x21, 0x36, 0x25
    defb 0x33, 0x00, 0x25, 0x2E, 0x34, 0x32, 0x21, 0x2E, 0x23, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    defb 0x00, 0x00, 0xEE, 0xFF, 0x22, 0x50, 0x0C, 0xFF, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23
    defb 0x21, 0x36, 0x25, 0x33, 0x00, 0x25, 0x2E, 0x34, 0x32, 0x21, 0x2E, 0x23, 0x25, 0x00, 0x00, 0x00
    defb 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0xFF, 0x22, 0x50, 0x0D, 0xFF, 0xE3, 0x00, 0x00, 0x00, 0x00
    defb 0x00, 0x00, 0x23, 0x21, 0x36, 0x25, 0x33, 0x00, 0x25, 0x2E, 0x34, 0x32, 0x21, 0x2E, 0x23, 0x25
    defb 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0xFF, 0x22, 0x50, 0x0E, 0xFF, 0xE3, 0x00
    defb 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x21, 0x36, 0x25, 0x33, 0x00, 0x25, 0x2E, 0x34, 0x32, 0x21
    defb 0x2E, 0x23, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0xFF, 0x22, 0x50, 0x0F
    defb 0xFF, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x21, 0x36, 0x25, 0x33, 0x00, 0x25, 0x2E
    defb 0x34, 0x32, 0x21, 0x2E, 0x23, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0xFF
    defb 0x22, 0x50, 0x10, 0xFF, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x21, 0x36, 0x25, 0x33
    defb 0x00, 0x25, 0x2E, 0x34, 0x32, 0x21, 0x2E, 0x23, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    defb 0x00, 0xEE, 0xFF, 0x23, 0x10, 0x03, 0x01, 0xFF, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x25
    defb 0x34, 0x35, 0x32, 0x2E, 0x00, 0x34, 0x2F, 0x00, 0x34, 0x28, 0x25, 0x00, 0x36, 0x21, 0x2E, 0x01
    defb 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0xFF, 0xFF

._mscce_1

    defb 0x15, 0x10, 0x02, 0x01, 0xFF, 0x20, 0x00, 0x07, 0x15, 0x20, 0x01, 0x07, 0x00, 0x20, 0x00, 0x08
    defb 0x17, 0x20, 0x01, 0x08, 0x00, 0xFF, 0x1A, 0x10, 0x02, 0x00, 0xFF, 0x20, 0x00, 0x07, 0x14, 0x20
    defb 0x01, 0x07, 0x15, 0x20, 0x00, 0x08, 0x16, 0x20, 0x01, 0x08, 0x17, 0x51, 0x00, 0x80, 0xE0, 0x81
    defb 0xFF, 0xFF

._msccf_0

    defb 0x07, 0x42, 0x06, 0xFF, 0x01, 0x02, 0x01, 0xFF, 0x22, 0x20, 0x04, 0x08, 0xFF, 0xE3, 0x00, 0x00
    defb 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x28, 0x25, 0x00, 0x25, 0x2E, 0x34, 0x32, 0x21, 0x2E, 0x23
    defb 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0xFF, 0x25, 0x20, 0x01, 0x08, 0x10
    defb 0x02, 0x00, 0xFF, 0xE3, 0x00, 0x2E, 0x25, 0x25, 0x24, 0x00, 0x2D, 0x2F, 0x32, 0x25, 0x00, 0x27
    defb 0x21, 0x33, 0x00, 0x34, 0x2F, 0x00, 0x2D, 0x2F, 0x36, 0x25, 0x00, 0x29, 0x34, 0x01, 0x00, 0xEE
    defb 0xFF, 0x35, 0x20, 0x01, 0x08, 0x10, 0x02, 0x01, 0xFF, 0x20, 0x00, 0x07, 0x15, 0x20, 0x01, 0x07
    defb 0x00, 0x20, 0x00, 0x08, 0x17, 0x20, 0x01, 0x08, 0x00, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    defb 0x21, 0x00, 0x22, 0x25, 0x25, 0x32, 0x00, 0x24, 0x35, 0x2E, 0x27, 0x25, 0x2F, 0x2E, 0x01, 0x00
    defb 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0xFF, 0x09, 0x20, 0x01, 0x08, 0x10, 0x03, 0x01, 0xFF, 0xF1
    defb 0xFF, 0xFF

#endasm
 
unsigned char *script;
 
void msc_init_all (void) {
    unsigned char i;
    for (i = 0; i < MAX_FLAGS; i ++)
        flags [i] = 0;
}
 
unsigned char read_byte (void) {
    unsigned char c;
    c = script [0];
    script ++;
    return c;
}
 
unsigned char read_vbyte (void) {
    unsigned char c;
    c = read_byte ();
    if (c & 128) return flags [c & 127];
    return c;
}
 
// Ejecutamos el script apuntado por *script:
void run_script (void) {
    unsigned char terminado = 0;
    unsigned char continuar = 0;
    unsigned char x, y, n, m, c;
    unsigned char *next_script;
 
    if (script == 0)
        return; 
 
    script_something_done = 0;
 
    while (1) {
        c = read_byte ();
        if (c == 0xFF) break;
        next_script = script + c;
        terminado = continuar = 0;
        while (!terminado) {
            c = read_byte ();
            switch (c) {
                case 0x10:
                    // IF FLAG x = n
                    // Opcode: 10 x n
                    x = read_vbyte ();
                    n = read_vbyte ();
                    terminado = (flags [x] != n);
                    break;
                case 0x20:
                    // IF PLAYER_TOUCHES x, y
                    // Opcode: 20 x y
                    x = read_vbyte ();
                    y = read_vbyte ();
                    terminado = (!((player.x >> 6) >= (x << 4) - 15 && (player.x >> 6) <= (x << 4) + 15 && (player.y >> 6) >= (y << 4) - 15 && (player.y >> 6) <= (y << 4) + 15));
                    break;
                case 0x41:
                     // IF OBJECT_COUNT = n
                     // Opcode: 41 n
                     n = read_vbyte ();
                     terminado = (player.objs != n);
                     break;
                case 0x42:
                     // IF KEY_COUNT = n
                     // Opcode: 42 n
                     n = read_vbyte ();
                     terminado = (player.keys != n);
                     break;
                case 0x50:
                     // IF NPANT n
                     // Opcode: 50 n
                     n = read_vbyte ();
                     terminado = (n_pant != n);
                     break;
                case 0xFF:
                    // THEN
                    // Opcode: FF
                    terminado = 1;
                    continuar = 1;
                    script_something_done = 1;
                    break;
            }
        }
        if (continuar) {
            terminado = 0;
            while (!terminado) {
                c = read_byte ();
                switch (c) {
                    case 0x01:
                        // SET FLAG x = n
                        // Opcode: 01 x n
                        x = read_vbyte ();
                        n = read_vbyte ();
                        flags [x] = n;
                        break;
                    case 0x20:
                        // SET TILE (x, y) = n
                        // Opcode: 20 x y n
                        x = read_vbyte ();
                        y = read_vbyte ();
                        n = read_vbyte ();
                        map_buff [x + (y << 4) - y] = n;
                        map_attr [x + (y << 4) - y] = comportamiento_tiles [n];
                        draw_coloured_tile (VIEWPORT_X + x + x, VIEWPORT_Y + y + y, n);
                        break;
                    case 0x51:
                        // SET_FIRE_ZONE x1, y1, x2, y2
                        // Opcode: 51 x1 y1 x2 y2
                        fzx1 = read_byte ();
                        fzy1 = read_byte ();
                        fzx2 = read_byte ();
                        fzy2 = read_byte ();
                        f_zone_ac = 1;
                        break;
                    case 0xE3:
                        x = 0;
                        while (1) {
                           n = read_byte ();
                           if (n == 0xEE) break;
                           sp_PrintAtInv (LINE_OF_TEXT, LINE_OF_TEXT_X + x, LINE_OF_TEXT_ATTR, n);
                           x ++;
                        }
                        break;
                    case 0xF1:
                        script_result = 1;
                        terminado = 1;
                        break;
                    case 0xFF:
                        terminado = 1;
                        break;
                }
            }
        }
        script = next_script;
    }
    if (script_result == 3) {
        script_result = 0;
        draw_scr ();
    }
}
